// int subarraysDivByK(vector<int>& nums, int k) {
    //     int n = nums.size();
    //     int sum ;
    //     int count=0;
    //     for(int i =0;i<n;i++){
    //         sum=0;
        
    //         for(int j = i;j<n;j++){
    //             sum+=nums[j];
    //             if(sum%k==0)
    //                 count++;
    //         }
    //     }
    //     return count;
    // }
    int subarraysDivByK(vector<int>& nums, int k) {
        map<int,int> mpp;
        mpp[0]=1;
        int presum = 0, count = 0;
        for(int i =0;i<nums.size();i++){
            presum+=nums[i];//stroing sum of elements
            int mod = ((presum%k)+k)%k;
            if(mpp.find(mod)!=mpp.end()){
                count+=mpp[mod];
                mpp[mod]++;
            }else{
                mpp[mod]=1;
            }

        }
        return count;
    }
